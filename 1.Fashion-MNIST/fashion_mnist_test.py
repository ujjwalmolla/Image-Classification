# -*- coding: utf-8 -*-
"""fashion_mnist_main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yxKXBZy7tf0AjPgahLEz-IZ8iROH1E-R
"""

from numpy import mean
from numpy import std
import numpy as np
import itertools
from matplotlib import pyplot
import matplotlib.pyplot as plt
from sklearn.model_selection import KFold
from keras.datasets import fashion_mnist
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.optimizers import SGD
import tensorflow as tf
from sklearn.metrics import confusion_matrix,classification_report

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

#Data Normalisation
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Break training data into train & validation sets 
(x_train, x_valid) = x_train[5000:], x_train[:5000] 
(y_train, y_valid) = y_train[5000:], y_train[:5000]


w, h = 28, 28
x_train = x_train.reshape(x_train.shape[0], w, h, 1)
x_valid = x_valid.reshape(x_valid.shape[0], w, h, 1)
x_test = x_test.reshape(x_test.shape[0], w, h, 1)

# One-hot encoding the labels
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_valid = tf.keras.utils.to_categorical(y_valid, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)


model = tf.keras.Sequential()

# Load the weights from the saved model
model=tf.keras.models.load_model("myModel")

# Evaluate the model on test set
score = model.evaluate(x_test, y_test, verbose=0)

print('Test accuracy:{:.4f}'.format(score[1]))
print("Test Loss: {:.4f}".format(score[0]))


def plot_confusion_mat(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):   

    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > (cm.max() / 2) else "black")
        
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=90)
    plt.yticks(tick_marks, classes)

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.savefig('confusion_mat.png')

#Predict class level 
y_hat = model.predict(x_test)
predicted_label = []
for i in range(y_hat.shape[0]):
    predicted_label.append(np.argmax(y_hat[i]))
truth_label = np.argmax(y_test, axis = 1)

#Write the predicted level of test data set to a file
file1 = open("cnn.txt","w")
for i in range(len(predicted_label)):
  file1.write(class_names[predicted_label[i]])
  file1.write("\n")
file1.close()

#Generate confusion matrix
confusion_mat=confusion_matrix(truth_label, predicted_label)
plot_confusion_mat(confusion_mat,classes = class_names)

#Classification report
print(classification_report(truth_label, predicted_label, target_names = class_names))